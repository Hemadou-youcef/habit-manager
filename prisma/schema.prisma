// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Our Application is Habits Management System 

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  HabitsGroup   HabitsGroup[]
  Habits        Habits[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Define HabitGroup model
model HabitsGroup {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  name      String
  icon      String   @default("folder")
  habits    Habits[] // Establishes a one-to-many relationship with Habit model
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define Habit model
model Habits {
  id                     Int          @id @default(autoincrement())
  user                   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String
  habitGroup             HabitsGroup? @relation(fields: [habitGroupId], references: [id])
  habitGroupId           Int?
  name                   String
  type                   String // Options: "good", "bad"
  startDate              DateTime
  isArchived             Boolean      @default(false)
  accentColor            String
  icon                   String
  goalsValue             Int
  goalsPeriodicity       String // Options: "daily", "weekly", "monthly", "yearly"
  goalsUnit              String
  goalsPeriodicityValues String // Options for "daily"
  progress               Progress[] // Establishes a one-to-many relationship with Progress model
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @default(now()) @updatedAt
  shareLink              String
}

// Define Progress model
model Progress {
  id        Int      @id @default(autoincrement())
  habit     Habits   @relation(fields: [habitId], references: [id])
  habitId   Int
  value     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// // Habits in Typescript
// type Habit = {
// id: number;
// name: string;
// type: string;
// startDate: Date;
// isArchived: boolean;
// accentColor: string;
// icon: string;
// goalsValue: number;
// goalsPeriodicity: string;
// goalsUnit: string;
// goalsPeriodicityValues: string;
// progress: Progress[];
// createdAt: Date;
// updatedAt: Date;
// shareLink: string;
// }

// // Progress in Typescript
// type Progress = {
// id: number;
// habit: Habit;
// value: number;
// createdAt: Date;
// updatedAt: Date;
// }
